"""Initial migration

Revision ID: 4117da078229
Revises: 
Create Date: 2025-06-10 19:10:38.000358-06:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '4117da078229'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('academic_unit_types',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Unique type name'),
    sa.Column('display_name', sa.String(length=150), nullable=False, comment='Human-readable type name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed description of this academic unit type'),
    sa.Column('hierarchy_level', sa.Integer(), nullable=False, comment='Level in academic hierarchy (1=top level, higher=sub levels)'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Whether type is active (Y/N)'),
    sa.Column('sort_order', sa.Integer(), nullable=False, comment='Display order in lists (lower = appears first)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    with op.batch_alter_table('academic_unit_types', schema=None) as batch_op:
        batch_op.create_index('idx_academic_unit_type_active', ['is_active'], unique=False)
        batch_op.create_index('idx_academic_unit_type_active_sort', ['is_active', 'sort_order'], unique=False)
        batch_op.create_index('idx_academic_unit_type_hierarchy', ['hierarchy_level'], unique=False)
        batch_op.create_index('idx_academic_unit_type_name', ['name'], unique=False)
        batch_op.create_index('idx_academic_unit_type_sort', ['sort_order'], unique=False)

    op.create_table('areas',
    sa.Column('name', sa.String(length=150), nullable=False, comment='Area name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Area description'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Active status'),
    sa.Column('sort_order', sa.Integer(), nullable=False, comment='Display order'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    with op.batch_alter_table('areas', schema=None) as batch_op:
        batch_op.create_index('idx_area_active', ['is_active'], unique=False)
        batch_op.create_index('idx_area_name', ['name'], unique=False)

    op.create_table('institutional_users',
    sa.Column('institution', sa.String(length=200), nullable=False, comment='Institución'),
    sa.Column('faculty_id', sa.String(length=50), nullable=True, comment='ID de facultad/empleado'),
    sa.Column('academic_title', sa.String(length=100), nullable=True, comment='Título académico (Dr., Lic., Ing.)'),
    sa.Column('position_title', sa.String(length=150), nullable=True, comment='Puesto en la institución'),
    sa.Column('office_phone', sa.String(length=50), nullable=True, comment='Teléfono de oficina'),
    sa.Column('office_location', sa.String(length=200), nullable=True, comment='Ubicación de oficina'),
    sa.Column('is_faculty', sa.String(length=1), nullable=False, comment='Es faculty (Y/N)'),
    sa.Column('is_student', sa.String(length=1), nullable=False, comment='Es estudiante (Y/N)'),
    sa.Column('is_external_client', sa.String(length=1), nullable=False, comment='Es cliente externo (Y/N)'),
    sa.Column('can_request_projects', sa.String(length=1), nullable=False, comment='Puede solicitar proyectos (Y/N)'),
    sa.Column('username', sa.String(length=100), nullable=False, comment='Unique username for login'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='Email address (also used for login)'),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='Hashed password'),
    sa.Column('first_name', sa.String(length=100), nullable=False, comment="User's first name"),
    sa.Column('last_name', sa.String(length=100), nullable=False, comment="User's last name"),
    sa.Column('phone', sa.String(length=50), nullable=True, comment='Contact phone number'),
    sa.Column('profile_photo', sa.String(length=500), nullable=True, comment='URL or path to profile photo'),
    sa.Column('birthday', sa.Date(), nullable=True, comment='Date of birth'),
    sa.Column('join_date', sa.Date(), nullable=False, comment='Date when user joined the platform'),
    sa.Column('last_login', sa.DateTime(), nullable=True, comment='Last login timestamp'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Whether account is active (Y/N)'),
    sa.Column('is_verified', sa.String(length=1), nullable=False, comment='Whether email is verified (Y/N)'),
    sa.Column('is_locked', sa.String(length=1), nullable=False, comment='Whether account is locked (Y/N)'),
    sa.Column('reset_token', sa.String(length=255), nullable=True, comment='Password reset token'),
    sa.Column('reset_token_expires', sa.DateTime(), nullable=True, comment='Password reset token expiration'),
    sa.Column('bio', sa.Text(), nullable=True, comment='User biography or description'),
    sa.Column('timezone', sa.String(length=50), nullable=True, comment="User's timezone"),
    sa.Column('language', sa.String(length=10), nullable=False, comment='Preferred language (es, en)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('uuid', mysql.CHAR(length=36), nullable=False, comment='Public unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    with op.batch_alter_table('institutional_users', schema=None) as batch_op:
        batch_op.create_index('idx_institutional_user_can_request', ['can_request_projects'], unique=False)
        batch_op.create_index('idx_institutional_user_faculty_id', ['faculty_id'], unique=False)
        batch_op.create_index('idx_institutional_user_institution', ['institution'], unique=False)
        batch_op.create_index('idx_institutional_user_is_external', ['is_external_client'], unique=False)
        batch_op.create_index('idx_institutional_user_is_faculty', ['is_faculty'], unique=False)
        batch_op.create_index('idx_institutional_user_is_student', ['is_student'], unique=False)
        batch_op.create_index('idx_institutional_users_active', ['is_active'], unique=False)
        batch_op.create_index('idx_institutional_users_email', ['email'], unique=False)
        batch_op.create_index('idx_institutional_users_username', ['username'], unique=False)
        batch_op.create_index('idx_institutional_users_uuid', ['uuid'], unique=False)
        batch_op.create_index(batch_op.f('ix_institutional_users_uuid'), ['uuid'], unique=True)

    op.create_table('internal_users',
    sa.Column('employee_id', sa.String(length=50), nullable=True, comment='ID de empleado'),
    sa.Column('position', sa.String(length=100), nullable=True, comment='Puesto de trabajo'),
    sa.Column('banner_photo', sa.String(length=500), nullable=True, comment='Foto de banner'),
    sa.Column('last_activity', sa.DateTime(), nullable=True, comment='Última actividad'),
    sa.Column('can_access_dashboard', sa.String(length=1), nullable=False, comment='Puede acceder al dashboard (Y/N)'),
    sa.Column('username', sa.String(length=100), nullable=False, comment='Unique username for login'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='Email address (also used for login)'),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='Hashed password'),
    sa.Column('first_name', sa.String(length=100), nullable=False, comment="User's first name"),
    sa.Column('last_name', sa.String(length=100), nullable=False, comment="User's last name"),
    sa.Column('phone', sa.String(length=50), nullable=True, comment='Contact phone number'),
    sa.Column('profile_photo', sa.String(length=500), nullable=True, comment='URL or path to profile photo'),
    sa.Column('birthday', sa.Date(), nullable=True, comment='Date of birth'),
    sa.Column('join_date', sa.Date(), nullable=False, comment='Date when user joined the platform'),
    sa.Column('last_login', sa.DateTime(), nullable=True, comment='Last login timestamp'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Whether account is active (Y/N)'),
    sa.Column('is_verified', sa.String(length=1), nullable=False, comment='Whether email is verified (Y/N)'),
    sa.Column('is_locked', sa.String(length=1), nullable=False, comment='Whether account is locked (Y/N)'),
    sa.Column('reset_token', sa.String(length=255), nullable=True, comment='Password reset token'),
    sa.Column('reset_token_expires', sa.DateTime(), nullable=True, comment='Password reset token expiration'),
    sa.Column('bio', sa.Text(), nullable=True, comment='User biography or description'),
    sa.Column('timezone', sa.String(length=50), nullable=True, comment="User's timezone"),
    sa.Column('language', sa.String(length=10), nullable=False, comment='Preferred language (es, en)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('uuid', mysql.CHAR(length=36), nullable=False, comment='Public unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('employee_id'),
    sa.UniqueConstraint('username')
    )
    with op.batch_alter_table('internal_users', schema=None) as batch_op:
        batch_op.create_index('idx_internal_user_dashboard_access', ['can_access_dashboard'], unique=False)
        batch_op.create_index('idx_internal_user_employee_id', ['employee_id'], unique=False)
        batch_op.create_index('idx_internal_user_last_activity', ['last_activity'], unique=False)
        batch_op.create_index('idx_internal_user_position', ['position'], unique=False)
        batch_op.create_index('idx_internal_users_active', ['is_active'], unique=False)
        batch_op.create_index('idx_internal_users_email', ['email'], unique=False)
        batch_op.create_index('idx_internal_users_last_login', ['last_login'], unique=False)
        batch_op.create_index('idx_internal_users_username', ['username'], unique=False)
        batch_op.create_index('idx_internal_users_uuid', ['uuid'], unique=False)
        batch_op.create_index(batch_op.f('ix_internal_users_uuid'), ['uuid'], unique=True)

    op.create_table('permissions',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Unique permission name (snake_case)'),
    sa.Column('display_name', sa.String(length=150), nullable=False, comment='Human-readable permission name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed description of what this permission allows'),
    sa.Column('category', sa.String(length=50), nullable=False, comment='Permission category (cms, users, analytics, etc.)'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Whether permission is active (Y/N)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.create_index('idx_permission_active', ['is_active'], unique=False)
        batch_op.create_index('idx_permission_category', ['category'], unique=False)
        batch_op.create_index('idx_permission_category_active', ['category', 'is_active'], unique=False)
        batch_op.create_index('idx_permission_name', ['name'], unique=False)

    op.create_table('roles',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Unique role name (snake_case)'),
    sa.Column('display_name', sa.String(length=150), nullable=False, comment='Human-readable role name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed description of role responsibilities'),
    sa.Column('level', sa.Integer(), nullable=False, comment='Role hierarchy level (1=highest, 100=lowest)'),
    sa.Column('role_type', sa.String(length=50), nullable=False, comment='Role type (system, admin, standard, client)'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Whether role is active (Y/N)'),
    sa.Column('is_system', sa.String(length=1), nullable=False, comment='Whether role is system-defined (Y/N)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index('idx_role_active', ['is_active'], unique=False)
        batch_op.create_index('idx_role_level', ['level'], unique=False)
        batch_op.create_index('idx_role_level_active', ['level', 'is_active'], unique=False)
        batch_op.create_index('idx_role_name', ['name'], unique=False)
        batch_op.create_index('idx_role_system', ['is_system'], unique=False)
        batch_op.create_index('idx_role_type', ['role_type'], unique=False)
        batch_op.create_index('idx_role_type_active', ['role_type', 'is_active'], unique=False)

    op.create_table('academic_units',
    sa.Column('name', sa.String(length=200), nullable=False, comment='Faculty name'),
    sa.Column('abbreviation', sa.String(length=20), nullable=True, comment='Faculty abbreviation (FISICC, FING)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Faculty description'),
    sa.Column('type_id', sa.Integer(), nullable=False, comment='Foreign key to academic unit types'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Active status'),
    sa.Column('sort_order', sa.Integer(), nullable=False, comment='Display order'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.ForeignKeyConstraint(['type_id'], ['academic_unit_types.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('abbreviation')
    )
    with op.batch_alter_table('academic_units', schema=None) as batch_op:
        batch_op.create_index('idx_academic_unit_abbreviation', ['abbreviation'], unique=False)
        batch_op.create_index('idx_academic_unit_active', ['is_active'], unique=False)
        batch_op.create_index('idx_academic_unit_name', ['name'], unique=False)
        batch_op.create_index('idx_academic_unit_type', ['type_id'], unique=False)

    op.create_table('role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False, comment='Foreign key to roles table'),
    sa.Column('permission_id', sa.Integer(), nullable=False, comment='Foreign key to permissions table'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Whether this role-permission assignment is active (Y/N)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('role_id', 'permission_id', name='uq_role_permission')
    )
    with op.batch_alter_table('role_permissions', schema=None) as batch_op:
        batch_op.create_index('idx_role_permission_active', ['is_active'], unique=False)
        batch_op.create_index('idx_role_permission_permission', ['permission_id'], unique=False)
        batch_op.create_index('idx_role_permission_permission_active', ['permission_id', 'is_active'], unique=False)
        batch_op.create_index('idx_role_permission_role', ['role_id'], unique=False)
        batch_op.create_index('idx_role_permission_role_active', ['role_id', 'is_active'], unique=False)

    op.create_table('user_areas',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Foreign key to internal users table'),
    sa.Column('area_id', sa.Integer(), nullable=False, comment='Foreign key to areas table'),
    sa.Column('role_in_area', sa.String(length=100), nullable=True, comment='Specific role within this area (Lead, Specialist, Assistant, etc.)'),
    sa.Column('specialization', sa.String(length=150), nullable=True, comment='Specific specialization within the area'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Whether area assignment is active (Y/N)'),
    sa.Column('is_primary', sa.String(length=1), nullable=False, comment="Whether this is the user's primary area (Y/N)"),
    sa.Column('can_lead_projects', sa.String(length=1), nullable=False, comment='Whether user can lead projects in this area (Y/N)'),
    sa.Column('time_allocation_percentage', sa.Integer(), nullable=True, comment='Percentage of time allocated to this area (0-100)'),
    sa.Column('assignment_reason', sa.String(length=500), nullable=True, comment='Reason for area assignment'),
    sa.Column('start_date', sa.Date(), nullable=True, comment='Start date of assignment'),
    sa.Column('end_date', sa.Date(), nullable=True, comment='End date of assignment (if temporary)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.ForeignKeyConstraint(['area_id'], ['areas.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['internal_users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'area_id', name='uq_user_area')
    )
    with op.batch_alter_table('user_areas', schema=None) as batch_op:
        batch_op.create_index('idx_user_area_active', ['is_active'], unique=False)
        batch_op.create_index('idx_user_area_active_can_lead', ['is_active', 'can_lead_projects'], unique=False)
        batch_op.create_index('idx_user_area_area', ['area_id'], unique=False)
        batch_op.create_index('idx_user_area_area_active', ['area_id', 'is_active'], unique=False)
        batch_op.create_index('idx_user_area_can_lead', ['can_lead_projects'], unique=False)
        batch_op.create_index('idx_user_area_end_date', ['end_date'], unique=False)
        batch_op.create_index('idx_user_area_primary', ['is_primary'], unique=False)
        batch_op.create_index('idx_user_area_start_date', ['start_date'], unique=False)
        batch_op.create_index('idx_user_area_user', ['user_id'], unique=False)
        batch_op.create_index('idx_user_area_user_active', ['user_id', 'is_active'], unique=False)
        batch_op.create_index('idx_user_area_user_primary', ['user_id', 'is_primary'], unique=False)

    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Foreign key to users table (internal ID)'),
    sa.Column('role_id', sa.Integer(), nullable=False, comment='Foreign key to roles table'),
    sa.Column('user_type', sa.String(length=50), nullable=False, comment='Type of user (internal_user, institutional_user)'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Whether this role assignment is active (Y/N)'),
    sa.Column('is_primary', sa.String(length=1), nullable=False, comment="Whether this is the user's primary role (Y/N)"),
    sa.Column('assigned_reason', sa.String(length=500), nullable=True, comment='Reason for role assignment'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'role_id', 'user_type', name='uq_user_role_type')
    )
    with op.batch_alter_table('user_roles', schema=None) as batch_op:
        batch_op.create_index('idx_user_role_active', ['is_active'], unique=False)
        batch_op.create_index('idx_user_role_primary', ['is_primary'], unique=False)
        batch_op.create_index('idx_user_role_role', ['role_id'], unique=False)
        batch_op.create_index('idx_user_role_role_active', ['role_id', 'is_active'], unique=False)
        batch_op.create_index('idx_user_role_type', ['user_type'], unique=False)
        batch_op.create_index('idx_user_role_type_active', ['user_type', 'is_active'], unique=False)
        batch_op.create_index('idx_user_role_user', ['user_id'], unique=False)
        batch_op.create_index('idx_user_role_user_active', ['user_id', 'is_active'], unique=False)
        batch_op.create_index('idx_user_role_user_primary', ['user_id', 'is_primary'], unique=False)
        batch_op.create_index('idx_user_role_user_type', ['user_id', 'user_type'], unique=False)

    op.create_table('user_academic_units',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Foreign key to institutional users table'),
    sa.Column('academic_unit_id', sa.Integer(), nullable=False, comment='Foreign key to academic units table'),
    sa.Column('relationship_type', sa.String(length=50), nullable=False, comment='Type of relationship (faculty, student, staff, collaborator, external)'),
    sa.Column('position_title', sa.String(length=150), nullable=True, comment='Specific position or title within the academic unit'),
    sa.Column('department', sa.String(length=100), nullable=True, comment='Specific department within the academic unit'),
    sa.Column('degree_program', sa.String(length=200), nullable=True, comment='Degree program (for students)'),
    sa.Column('academic_year', sa.String(length=20), nullable=True, comment='Academic year or level'),
    sa.Column('graduation_date', sa.Date(), nullable=True, comment='Expected or actual graduation date'),
    sa.Column('is_active', sa.String(length=1), nullable=False, comment='Whether assignment is active (Y/N)'),
    sa.Column('is_primary', sa.String(length=1), nullable=False, comment="Whether this is the user's primary academic unit (Y/N)"),
    sa.Column('can_represent_unit', sa.String(length=1), nullable=False, comment='Whether user can represent the academic unit (Y/N)'),
    sa.Column('has_budget_authority', sa.String(length=1), nullable=False, comment='Whether user has budget authority for projects (Y/N)'),
    sa.Column('start_date', sa.Date(), nullable=True, comment='Start date of association'),
    sa.Column('end_date', sa.Date(), nullable=True, comment='End date of association (if applicable)'),
    sa.Column('office_number', sa.String(length=50), nullable=True, comment='Office number within the academic unit'),
    sa.Column('internal_phone', sa.String(length=50), nullable=True, comment='Internal phone extension'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal unique identifier'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='User ID who created this record'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='User ID who last updated this record'),
    sa.ForeignKeyConstraint(['academic_unit_id'], ['academic_units.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['institutional_users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'academic_unit_id', name='uq_user_academic_unit')
    )
    with op.batch_alter_table('user_academic_units', schema=None) as batch_op:
        batch_op.create_index('idx_user_academic_unit_academic_unit', ['academic_unit_id'], unique=False)
        batch_op.create_index('idx_user_academic_unit_active', ['is_active'], unique=False)
        batch_op.create_index('idx_user_academic_unit_budget_authority', ['has_budget_authority'], unique=False)
        batch_op.create_index('idx_user_academic_unit_can_represent', ['can_represent_unit'], unique=False)
        batch_op.create_index('idx_user_academic_unit_end_date', ['end_date'], unique=False)
        batch_op.create_index('idx_user_academic_unit_graduation', ['graduation_date'], unique=False)
        batch_op.create_index('idx_user_academic_unit_primary', ['is_primary'], unique=False)
        batch_op.create_index('idx_user_academic_unit_relationship_type', ['relationship_type'], unique=False)
        batch_op.create_index('idx_user_academic_unit_start_date', ['start_date'], unique=False)
        batch_op.create_index('idx_user_academic_unit_type_active', ['relationship_type', 'is_active'], unique=False)
        batch_op.create_index('idx_user_academic_unit_unit_active', ['academic_unit_id', 'is_active'], unique=False)
        batch_op.create_index('idx_user_academic_unit_user', ['user_id'], unique=False)
        batch_op.create_index('idx_user_academic_unit_user_active', ['user_id', 'is_active'], unique=False)
        batch_op.create_index('idx_user_academic_unit_user_primary', ['user_id', 'is_primary'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_academic_units', schema=None) as batch_op:
        batch_op.drop_index('idx_user_academic_unit_user_primary')
        batch_op.drop_index('idx_user_academic_unit_user_active')
        batch_op.drop_index('idx_user_academic_unit_user')
        batch_op.drop_index('idx_user_academic_unit_unit_active')
        batch_op.drop_index('idx_user_academic_unit_type_active')
        batch_op.drop_index('idx_user_academic_unit_start_date')
        batch_op.drop_index('idx_user_academic_unit_relationship_type')
        batch_op.drop_index('idx_user_academic_unit_primary')
        batch_op.drop_index('idx_user_academic_unit_graduation')
        batch_op.drop_index('idx_user_academic_unit_end_date')
        batch_op.drop_index('idx_user_academic_unit_can_represent')
        batch_op.drop_index('idx_user_academic_unit_budget_authority')
        batch_op.drop_index('idx_user_academic_unit_active')
        batch_op.drop_index('idx_user_academic_unit_academic_unit')

    op.drop_table('user_academic_units')
    with op.batch_alter_table('user_roles', schema=None) as batch_op:
        batch_op.drop_index('idx_user_role_user_type')
        batch_op.drop_index('idx_user_role_user_primary')
        batch_op.drop_index('idx_user_role_user_active')
        batch_op.drop_index('idx_user_role_user')
        batch_op.drop_index('idx_user_role_type_active')
        batch_op.drop_index('idx_user_role_type')
        batch_op.drop_index('idx_user_role_role_active')
        batch_op.drop_index('idx_user_role_role')
        batch_op.drop_index('idx_user_role_primary')
        batch_op.drop_index('idx_user_role_active')

    op.drop_table('user_roles')
    with op.batch_alter_table('user_areas', schema=None) as batch_op:
        batch_op.drop_index('idx_user_area_user_primary')
        batch_op.drop_index('idx_user_area_user_active')
        batch_op.drop_index('idx_user_area_user')
        batch_op.drop_index('idx_user_area_start_date')
        batch_op.drop_index('idx_user_area_primary')
        batch_op.drop_index('idx_user_area_end_date')
        batch_op.drop_index('idx_user_area_can_lead')
        batch_op.drop_index('idx_user_area_area_active')
        batch_op.drop_index('idx_user_area_area')
        batch_op.drop_index('idx_user_area_active_can_lead')
        batch_op.drop_index('idx_user_area_active')

    op.drop_table('user_areas')
    with op.batch_alter_table('role_permissions', schema=None) as batch_op:
        batch_op.drop_index('idx_role_permission_role_active')
        batch_op.drop_index('idx_role_permission_role')
        batch_op.drop_index('idx_role_permission_permission_active')
        batch_op.drop_index('idx_role_permission_permission')
        batch_op.drop_index('idx_role_permission_active')

    op.drop_table('role_permissions')
    with op.batch_alter_table('academic_units', schema=None) as batch_op:
        batch_op.drop_index('idx_academic_unit_type')
        batch_op.drop_index('idx_academic_unit_name')
        batch_op.drop_index('idx_academic_unit_active')
        batch_op.drop_index('idx_academic_unit_abbreviation')

    op.drop_table('academic_units')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index('idx_role_type_active')
        batch_op.drop_index('idx_role_type')
        batch_op.drop_index('idx_role_system')
        batch_op.drop_index('idx_role_name')
        batch_op.drop_index('idx_role_level_active')
        batch_op.drop_index('idx_role_level')
        batch_op.drop_index('idx_role_active')

    op.drop_table('roles')
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.drop_index('idx_permission_name')
        batch_op.drop_index('idx_permission_category_active')
        batch_op.drop_index('idx_permission_category')
        batch_op.drop_index('idx_permission_active')

    op.drop_table('permissions')
    with op.batch_alter_table('internal_users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_internal_users_uuid'))
        batch_op.drop_index('idx_internal_users_uuid')
        batch_op.drop_index('idx_internal_users_username')
        batch_op.drop_index('idx_internal_users_last_login')
        batch_op.drop_index('idx_internal_users_email')
        batch_op.drop_index('idx_internal_users_active')
        batch_op.drop_index('idx_internal_user_position')
        batch_op.drop_index('idx_internal_user_last_activity')
        batch_op.drop_index('idx_internal_user_employee_id')
        batch_op.drop_index('idx_internal_user_dashboard_access')

    op.drop_table('internal_users')
    with op.batch_alter_table('institutional_users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_institutional_users_uuid'))
        batch_op.drop_index('idx_institutional_users_uuid')
        batch_op.drop_index('idx_institutional_users_username')
        batch_op.drop_index('idx_institutional_users_email')
        batch_op.drop_index('idx_institutional_users_active')
        batch_op.drop_index('idx_institutional_user_is_student')
        batch_op.drop_index('idx_institutional_user_is_faculty')
        batch_op.drop_index('idx_institutional_user_is_external')
        batch_op.drop_index('idx_institutional_user_institution')
        batch_op.drop_index('idx_institutional_user_faculty_id')
        batch_op.drop_index('idx_institutional_user_can_request')

    op.drop_table('institutional_users')
    with op.batch_alter_table('areas', schema=None) as batch_op:
        batch_op.drop_index('idx_area_name')
        batch_op.drop_index('idx_area_active')

    op.drop_table('areas')
    with op.batch_alter_table('academic_unit_types', schema=None) as batch_op:
        batch_op.drop_index('idx_academic_unit_type_sort')
        batch_op.drop_index('idx_academic_unit_type_name')
        batch_op.drop_index('idx_academic_unit_type_hierarchy')
        batch_op.drop_index('idx_academic_unit_type_active_sort')
        batch_op.drop_index('idx_academic_unit_type_active')

    op.drop_table('academic_unit_types')
    # ### end Alembic commands ###